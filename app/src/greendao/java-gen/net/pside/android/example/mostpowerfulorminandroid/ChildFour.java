package net.pside.android.example.mostpowerfulorminandroid;

import net.pside.android.example.mostpowerfulorminandroid.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table CHILD_FOUR.
 */
public class ChildFour {

    private Long id;
    private Long ChildFiveId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChildFourDao myDao;

    private ChildFour childFour;
    private Long childFour__resolvedKey;


    public ChildFour() {
    }

    public ChildFour(Long id) {
        this.id = id;
    }

    public ChildFour(Long id, Long ChildFiveId) {
        this.id = id;
        this.ChildFiveId = ChildFiveId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChildFourDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getChildFiveId() {
        return ChildFiveId;
    }

    public void setChildFiveId(Long ChildFiveId) {
        this.ChildFiveId = ChildFiveId;
    }

    /** To-one relationship, resolved on first access. */
    public ChildFour getChildFour() {
        Long __key = this.ChildFiveId;
        if (childFour__resolvedKey == null || !childFour__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChildFourDao targetDao = daoSession.getChildFourDao();
            ChildFour childFourNew = targetDao.load(__key);
            synchronized (this) {
                childFour = childFourNew;
            	childFour__resolvedKey = __key;
            }
        }
        return childFour;
    }

    public void setChildFour(ChildFour childFour) {
        synchronized (this) {
            this.childFour = childFour;
            ChildFiveId = childFour == null ? null : childFour.getId();
            childFour__resolvedKey = ChildFiveId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
